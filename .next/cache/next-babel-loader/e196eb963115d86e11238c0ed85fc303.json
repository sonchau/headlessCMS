{"ast":null,"code":"var _jsxFileName = \"/Users/sonchau/projects/Prime_Content/components/themeSelect.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { atom, useRecoilState } from 'recoil';\nexport const themeState = atom({\n  key: 'themeState',\n  default: 'dark'\n});\n\nconst capitalize = s => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default function ThemeSelect() {\n  const [theme, setTheme] = useRecoilState(themeState);\n  const themes = ['light', 'dark'];\n\n  const onChange = event => {\n    setTheme(event.target.value);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(\"select\", {\n    name: \"theme\",\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, themes.map(item => {\n    return __jsx(\"option\", {\n      value: item,\n      selected: item === theme ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 22\n      }\n    }, capitalize(item));\n  })));\n}","map":{"version":3,"sources":["/Users/sonchau/projects/Prime_Content/components/themeSelect.tsx"],"names":["React","atom","useRecoilState","themeState","key","default","capitalize","s","charAt","toUpperCase","slice","ThemeSelect","theme","setTheme","themes","onChange","event","target","value","map","item"],"mappings":";;AAAA,OAAOA,KAAP,MAA8B,OAA9B;AACA,SAEEC,IAFF,EAIEC,cAJF,QAOO,QAPP;AAUA,OAAO,MAAMC,UAAU,GAAGF,IAAI,CAAC;AAC7BG,EAAAA,GAAG,EAAE,YADwB;AAE7BC,EAAAA,OAAO,EAAE;AAFoB,CAAD,CAAvB;;AAKP,MAAMC,UAAU,GAAIC,CAAD,IAAO;AACxB,MAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B,OAAO,EAAP;AAC3B,SAAOA,CAAC,CAACC,MAAF,CAAS,CAAT,EAAYC,WAAZ,KAA4BF,CAAC,CAACG,KAAF,CAAQ,CAAR,CAAnC;AACD,CAHD;;AAKA,eAAe,SAASC,WAAT,GAAuB;AAClC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,cAAc,CAACC,UAAD,CAAxC;AACA,QAAMW,MAAM,GAAG,CAAC,OAAD,EAAU,MAAV,CAAf;;AAEA,QAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1BH,IAAAA,QAAQ,CAACG,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAR;AACD,GAFD;;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,IAAI,EAAC,OAAb;AAAqB,IAAA,QAAQ,EAAEH,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEMD,MAAM,CAACK,GAAP,CAAWC,IAAI,IAAI;AACnB,WAAO;AAAQ,MAAA,KAAK,EAAEA,IAAf;AAAqB,MAAA,QAAQ,EAAEA,IAAI,KAAIR,KAAR,GAAgB,IAAhB,GAAsB,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6DN,UAAU,CAACc,IAAD,CAAvE,CAAP;AACC,GAFD,CAFN,CADF,CADF;AAWD","sourcesContent":["import React, {useState} from 'react';\nimport {\n  RecoilRoot,\n  atom,\n  selector,\n  useRecoilState,\n  useRecoilValue,\n  useSetRecoilState\n} from 'recoil';\n\n\nexport const themeState = atom({\n  key: 'themeState',\n  default: 'dark',\n});\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nexport default function ThemeSelect() {\n    const [theme, setTheme] = useRecoilState(themeState);\n    const themes = ['light', 'dark']\n\n    const onChange = (event) => {\n      setTheme(event.target.value);\n    };\n  \n    return (\n      <div>\n        <select name=\"theme\" onChange={onChange}>\n            {\n              themes.map(item => {\n              return <option value={item} selected={item ===theme ? true: false}>{capitalize(item)}</option>\n              })\n            }\n        </select>\n      </div>\n    );\n  }"]},"metadata":{},"sourceType":"module"}