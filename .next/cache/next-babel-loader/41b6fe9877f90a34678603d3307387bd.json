{"ast":null,"code":"var _jsxFileName = \"/Users/sonchau/projects/Prime_Content/components/characterCounter.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { atom, selector, useRecoilState, useRecoilValue } from 'recoil';\nexport default function CharacterCounter() {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, __jsx(TextInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 11\n    }\n  }), __jsx(CharacterCount, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 11\n    }\n  }));\n}\nconst textState = atom({\n  key: 'textState',\n  // unique ID (with respect to other atoms/selectors)\n  default: '' // default value (aka initial value)\n\n});\n\nfunction TextInput() {\n  const [text, setText] = useRecoilState(textState);\n\n  const onChange = event => {\n    setText(event.target.value);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    value: text,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }), \"Echo: \", text);\n}\n\nconst charCountState = selector({\n  key: 'charCountState',\n  // unique ID (with respect to other atoms/selectors)\n  get: ({\n    get\n  }) => {\n    const text = get(textState);\n    return text.length;\n  }\n});\n\nfunction CharacterCount() {\n  const count = useRecoilValue(charCountState);\n  return __jsx(React.Fragment, null, \"Character Count: \", count);\n}","map":{"version":3,"sources":["/Users/sonchau/projects/Prime_Content/components/characterCounter.tsx"],"names":["React","atom","selector","useRecoilState","useRecoilValue","CharacterCounter","textState","key","default","TextInput","text","setText","onChange","event","target","value","charCountState","get","length","CharacterCount","count"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAEEC,IAFF,EAGEC,QAHF,EAIEC,cAJF,EAKEC,cALF,QAMO,QANP;AAQA,eAAe,SAASC,gBAAT,GAA4B;AACvC,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADJ;AAMH;AAED,MAAMC,SAAS,GAAGL,IAAI,CAAC;AACnBM,EAAAA,GAAG,EAAE,WADc;AACD;AAClBC,EAAAA,OAAO,EAAE,EAFU,CAEN;;AAFM,CAAD,CAAtB;;AAKA,SAASC,SAAT,GAAqB;AACjB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,cAAc,CAACG,SAAD,CAAtC;;AAEA,QAAMM,QAAQ,GAAIC,KAAD,IAAW;AAC1BF,IAAAA,OAAO,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACD,GAFD;;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEL,IAA1B;AAAgC,IAAA,QAAQ,EAAEE,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,YAGSF,IAHT,CADF;AAOD;;AACD,MAAMM,cAAc,GAAGd,QAAQ,CAAC;AAC9BK,EAAAA,GAAG,EAAE,gBADyB;AACP;AACvBU,EAAAA,GAAG,EAAE,CAAC;AAACA,IAAAA;AAAD,GAAD,KAAW;AACd,UAAMP,IAAI,GAAGO,GAAG,CAACX,SAAD,CAAhB;AAEA,WAAOI,IAAI,CAACQ,MAAZ;AACD;AAN6B,CAAD,CAA/B;;AASA,SAASC,cAAT,GAA0B;AACxB,QAAMC,KAAK,GAAGhB,cAAc,CAACY,cAAD,CAA5B;AACA,SAAO,iDAAoBI,KAApB,CAAP;AACD","sourcesContent":["import React from 'react';\nimport {\n  RecoilRoot,\n  atom,\n  selector,\n  useRecoilState,\n  useRecoilValue,\n} from 'recoil';\n\nexport default function CharacterCounter() {\n    return (\n        <div>\n          <TextInput />\n          <CharacterCount />\n        </div>\n      );\n}\n\nconst textState = atom({\n    key: 'textState', // unique ID (with respect to other atoms/selectors)\n    default: '', // default value (aka initial value)\n  });\n\nfunction TextInput() {\n    const [text, setText] = useRecoilState(textState);\n  \n    const onChange = (event) => {\n      setText(event.target.value);\n    };\n  \n    return (\n      <div>\n        <input type=\"text\" value={text} onChange={onChange} />\n        <br />\n        Echo: {text}\n      </div>\n    );\n  }\n  const charCountState = selector({\n    key: 'charCountState', // unique ID (with respect to other atoms/selectors)\n    get: ({get}) => {\n      const text = get(textState);\n  \n      return text.length;\n    },\n  });\n\n  function CharacterCount() {\n    const count = useRecoilValue(charCountState);\n    return <>Character Count: {count}</>;\n  }"]},"metadata":{},"sourceType":"module"}