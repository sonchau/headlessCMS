{"ast":null,"code":"var _jsxFileName = \"/Users/sonchau/projects/Prime_Content/components/toDo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { atom, selector, useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\nconst todoListState = atom({\n  key: 'todoListState',\n  default: []\n});\nexport default function TodoList() {\n  const todoList = useRecoilValue(todoListState);\n  return __jsx(React.Fragment, null, __jsx(TodoListStats, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }), __jsx(TodoListFilters, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }), __jsx(TodoItemCreator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }), todoList.map(todoItem => __jsx(TodoItem, {\n    key: todoItem.id,\n    item: todoItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction TodoItemCreator() {\n  const {\n    0: inputValue,\n    1: setInputValue\n  } = useState('');\n  const setTodoList = useSetRecoilState(todoListState);\n\n  const addItem = () => {\n    setTodoList(oldTodoList => [...oldTodoList, {\n      id: getId(),\n      text: inputValue,\n      isComplete: false\n    }]);\n    setInputValue('');\n  };\n\n  const onChange = ({\n    target: {\n      value\n    }\n  }) => {\n    setInputValue(value);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    onClick: addItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, \"Add\"));\n} // utility for creating unique Id\n\n\nlet id = 0;\n\nfunction getId() {\n  return id++;\n} /////////////\n\n\nfunction TodoItem({\n  item\n}) {\n  const [todoList, setTodoList] = useRecoilState(todoListState);\n  const index = todoList.findIndex(listItem => listItem === item);\n\n  const editItemText = ({\n    target: {\n      value\n    }\n  }) => {\n    const newList = replaceItemAtIndex(todoList, index, _objectSpread({}, item, {\n      text: value\n    }));\n    setTodoList(newList);\n  };\n\n  const toggleItemCompletion = () => {\n    const newList = replaceItemAtIndex(todoList, index, _objectSpread({}, item, {\n      isComplete: !item.isComplete\n    }));\n    setTodoList(newList);\n  };\n\n  const deleteItem = () => {\n    const newList = removeItemAtIndex(todoList, index);\n    setTodoList(newList);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    value: item.text,\n    onChange: editItemText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), __jsx(\"input\", {\n    type: \"checkbox\",\n    checked: item.isComplete,\n    onChange: toggleItemCompletion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    onClick: deleteItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, \"X\"));\n}\n\nfunction replaceItemAtIndex(arr, index, newValue) {\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\n}\n\nfunction removeItemAtIndex(arr, index) {\n  return [...arr.slice(0, index), ...arr.slice(index + 1)];\n} ////////////// Selector\n\n\nconst todoListFilterState = atom({\n  key: 'todoListFilterState',\n  default: 'Show All'\n});\nconst filteredTodoListState = selector({\n  key: 'filteredTodoListState',\n  get: ({\n    get\n  }) => {\n    const filter = get(todoListFilterState);\n    const list = get(todoListState);\n\n    switch (filter) {\n      case 'Show Completed':\n        return list.filter(item => item.isComplete);\n\n      case 'Show Uncompleted':\n        return list.filter(item => !item.isComplete);\n\n      default:\n        return list;\n    }\n  }\n});\n\nfunction TodoListFilters() {\n  const [filter, setFilter] = useRecoilState(todoListFilterState);\n\n  const updateFilter = ({\n    target: {\n      value\n    }\n  }) => {\n    setFilter(value);\n  };\n\n  return __jsx(React.Fragment, null, \"Filter:\", __jsx(\"select\", {\n    value: filter,\n    onChange: updateFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, __jsx(\"option\", {\n    value: \"Show All\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, \"All\"), __jsx(\"option\", {\n    value: \"Show Completed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, \"Completed\"), __jsx(\"option\", {\n    value: \"Show Uncompleted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, \"Uncompleted\")));\n} /////////\n\n\nconst todoListStatsState = selector({\n  key: 'todoListStatsState',\n  get: ({\n    get\n  }) => {\n    const todoList = get(filteredTodoListState);\n    const totalNum = todoList.length;\n    const totalCompletedNum = todoList.filter(item => item.isComplete).length;\n    const totalUncompletedNum = totalNum - totalCompletedNum;\n    const percentCompleted = totalNum === 0 ? 0 : totalCompletedNum / totalNum;\n    return {\n      totalNum,\n      totalCompletedNum,\n      totalUncompletedNum,\n      percentCompleted\n    };\n  }\n});\n\nfunction TodoListStats() {\n  //const  todoListStatsStateValue = useRecoilValue(todoListStatsState);\n  return __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/sonchau/projects/Prime_Content/components/toDo.tsx"],"names":["React","useState","atom","selector","useRecoilState","useRecoilValue","useSetRecoilState","todoListState","key","default","TodoList","todoList","map","todoItem","id","TodoItemCreator","inputValue","setInputValue","setTodoList","addItem","oldTodoList","getId","text","isComplete","onChange","target","value","TodoItem","item","index","findIndex","listItem","editItemText","newList","replaceItemAtIndex","toggleItemCompletion","deleteItem","removeItemAtIndex","arr","newValue","slice","todoListFilterState","filteredTodoListState","get","filter","list","TodoListFilters","setFilter","updateFilter","todoListStatsState","totalNum","length","totalCompletedNum","totalUncompletedNum","percentCompleted","TodoListStats"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {\n  RecoilRoot,\n  atom,\n  selector,\n  useRecoilState,\n  useRecoilValue,\n  useSetRecoilState\n} from 'recoil';\n\n\nconst todoListState = atom({\n  key: 'todoListState',\n  default: [],\n});\n\nexport default function TodoList() {\n  const todoList = useRecoilValue(todoListState);\n\n  return (\n    <>\n      <TodoListStats />\n      <TodoListFilters /> \n      <TodoItemCreator />\n\n      {todoList.map((todoItem) => (\n        <TodoItem key={todoItem.id} item={todoItem} />\n      ))}\n    </>\n  );\n}\n\nfunction TodoItemCreator() {\n  const [inputValue, setInputValue] = useState('');\n  const setTodoList = useSetRecoilState(todoListState);\n\n  const addItem = () => {\n    setTodoList((oldTodoList) => [\n      ...oldTodoList,\n      {\n        id: getId(),\n        text: inputValue,\n        isComplete: false,\n      },\n    ]);\n    setInputValue('');\n  };\n\n  const onChange = ({target: {value}}) => {\n    setInputValue(value);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={inputValue} onChange={onChange} />\n      <button onClick={addItem}>Add</button>\n    </div>\n  );\n}\n\n// utility for creating unique Id\nlet id = 0;\nfunction getId() {\n  return id++;\n}\n\n/////////////\nfunction TodoItem({item}) {\n  const [todoList, setTodoList] = useRecoilState(todoListState);\n  const index = todoList.findIndex((listItem) => listItem === item);\n\n  const editItemText = ({target: {value}}) => {\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...item,\n      text: value,\n    });\n\n    setTodoList(newList);\n  };\n\n  const toggleItemCompletion = () => {\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...item,\n      isComplete: !item.isComplete,\n    });\n\n    setTodoList(newList);\n  };\n\n  const deleteItem = () => {\n    const newList = removeItemAtIndex(todoList, index);\n\n    setTodoList(newList);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={item.text} onChange={editItemText} />\n      <input\n        type=\"checkbox\"\n        checked={item.isComplete}\n        onChange={toggleItemCompletion}\n      />\n      <button onClick={deleteItem}>X</button>\n    </div>\n  );\n}\n\nfunction replaceItemAtIndex(arr, index, newValue) {\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\n}\n\nfunction removeItemAtIndex(arr, index) {\n  return [...arr.slice(0, index), ...arr.slice(index + 1)];\n}\n\n\n////////////// Selector\n\nconst todoListFilterState = atom({\n  key: 'todoListFilterState',\n  default: 'Show All',\n});\n\nconst filteredTodoListState = selector({\n  key: 'filteredTodoListState',\n  get: ({get}) => {\n    const filter = get(todoListFilterState);\n    const list = get(todoListState);\n\n    switch (filter) {\n      case 'Show Completed':\n        return list.filter((item) => item.isComplete);\n      case 'Show Uncompleted':\n        return list.filter((item) => !item.isComplete);\n      default:\n        return list;\n    }\n  },\n});\n\n\nfunction TodoListFilters() {\n  const [filter, setFilter] = useRecoilState(todoListFilterState);\n\n  const updateFilter = ({target: {value}}) => {\n    setFilter(value);\n  };\n\n  return (\n    <>\n      Filter:\n      <select value={filter} onChange={updateFilter}>\n        <option value=\"Show All\">All</option>\n        <option value=\"Show Completed\">Completed</option>\n        <option value=\"Show Uncompleted\">Uncompleted</option>\n      </select>\n    </>\n  );\n}\n\n/////////\nconst todoListStatsState = selector({\n  key: 'todoListStatsState',\n  get: ({get}) => {\n    const todoList = get(filteredTodoListState);\n    const totalNum = todoList.length;\n    const totalCompletedNum = todoList.filter((item) => item.isComplete).length;\n    const totalUncompletedNum = totalNum - totalCompletedNum;\n    const percentCompleted = totalNum === 0 ? 0 : totalCompletedNum / totalNum;\n\n    return {\n      totalNum,\n      totalCompletedNum,\n      totalUncompletedNum,\n      percentCompleted,\n    };\n  },\n});\n\nfunction TodoListStats() {\n  //const  todoListStatsStateValue = useRecoilValue(todoListStatsState);\n\n  return (\n    <ul>\n\n    </ul>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}